question #1

void main() {
  List numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
  
  for (int number in numbers) {
    if (number % 2 == 0) {
      print(number);
    }
  }
}
    
question # 2


void main() {
  int limit = 10; // Change this value to the desired limit

  int a = 0;
  int b = 1;
  int c;

  print(a); // Print the first Fibonacci number
  print(b); // Print the second Fibonacci number

  for (int i = 2; i < limit; i++) {
    c = a + b;
    print(c);
    a = b;
    b = c;
  }
}

question # 4 

 int factorial(int number) {
  int result = 1;
  
  for (int i = 2; i <= number; i++) {
    result *= i;
  }
  
  return result;
}

void main() {
  int number = 5;
  int result = factorial(number);
  
  print('Factorial of $number is $result');
 
} 
  

question # 5 ;

int sumOfDigits(int number) {
  int sum = 0;
  
  while (number != 0) {
    sum += number % 10; // Add the last digit to the sum
    number ~/= 10; // Remove the last digit from the number
  }
  
  return sum;
}

void main() {
  int number = 12345;
  int result = sumOfDigits(number);
  
  print('Sum of digits: $result');
}


question # 3 #


import 'dart:math';

bool isPrime(int number) {
  if (number < 2) {
    return false;
  }

  int sqrtNumber = sqrt(number).toInt();
  for (int i = 2; i <= sqrtNumber; i++) {
    if (number % i == 0) {
      return false;
    }
  }

  return true;
}

void main() {
  int number = 17;

  if (isPrime(number)) {
    print('$number is a prime number.');
  } else {
    print('$number is not a prime number.');
  }
}

question # 6 

int findLargestElement(List<int> numbers) {
  if (numbers.isEmpty) {
    throw ArgumentError('List cannot be empty');
  }

  int largest = numbers[0];

  for (int i = 1; i < numbers.length; i++) {
    if (numbers[i] > largest) {
      largest = numbers[i];
    }
  }

  return largest;
}

void main() {
  List<int> numbers = [3, 9, 1, 6, 4, 2, 8, 5, 7];
  int largestElement = findLargestElement(numbers);

  print('Largest element: $largestElement');
}

question # 7 ;


void printMultiplicationTable(int number) {
  for (int i = 1; i <= 10; i++) {
    int result = number * i;
    print('$number x $i = $result');
  }
}

void main() {
  int number = 5;
  printMultiplicationTable(number);
}

 question # 9 ;

void main() {
  String inputString = "radar";
  if (isPalindrome(inputString)) {
    print('$inputString is a palindrome.');
  } else {
    print('$inputString is not a palindrome.');
  }
} 

question # 10 ;


import 'dart:io';

void main() {
  print('Input number of terms:');
  var numOfTerms = int.parse(stdin.readLineSync()!);

  for (var i = 1; i <= numOfTerms; i++) {
    var cube = i * i * i;
    print('Number is: $i and cube of $i is: $cube');
  }
} 

 question # 11 ;

import 'dart:io';

void main() {
  print('Enter the number of rows:');
  var rows = int.parse(stdin.readLineSync()!);

  for (var i = 1; i <= rows; i++) {
    for (var j = 1; j <= i; j++) {
      stdout.write('*');
    }
    stdout.write('\n');
  }
}  

question # 12 ; 

import 'dart:io';

void main() {
  print('Enter the number of rows:');
  var rows = int.parse(stdin.readLineSync()!);

  for (var i = 1; i <= rows; i++) {
    for (var j = 1; j <= i; j++) {
      stdout.write('$j');
    }
    stdout.write('\n');
  }
} 

question # 13 ; 

void main() {
  int rows = 4; // Number of rows in the triangle pattern

  for (int i = 1; i <= rows; i++) {
    String row = '';
    for (int j = 1; j <= i; j++) {
      row += i.toString();
    }
    print(row);
  }
} 

 question # 14 ; 


void main() {
  int rows = 4; // Number of rows in the triangle pattern
  int number = 1; // Starting number for the pattern

  for (int i = 1; i <= rows; i++) {
    String row = '';
    for (int j = 1; j <= i; j++) {
      row += number.toString() + ' ';
      number++;
    }
    print(row);
  }
} 

 question # 15 ；

void generatePyramid(int rows) {
  int number = 1;
  for (int i = 1; i <= rows; i++) {
    for (int j = 1; j <= i; j++) {
      print('$number ', end: '');
      number++;
    }
    print('');
  }
}

void main() {
  generatePyramid(4);
}　

question # 16 ; 

void generatePyramid(int rows) {
  for (int i = 1; i <= rows; i++) {
    for (int j = 1; j <= i; j++) {
      print('* ', end: '');
    }
    print('');
  }
}

void main() {
  generatePyramid(4);
}



question # 17 ;

void main() {
  final String validEmail = 'user@example.com';
  final String validPassword = 'password';

  bool isLoggedIn = false;

  while (!isLoggedIn) {
    String email = prompt('Enter your email:');
    String password = prompt('Enter your password:');

    if (email == validEmail && password == validPassword) {
      isLoggedIn = true;
      print('User login successful.');
    } else {
      print('Invalid credentials. Please try again.');
    }
  }
}

String prompt(String promptText) {
  print(promptText);
  return stdin.readLineSync().trim();
} 

question # 18  ; 


void main() {
  List<Map<String, String>> credentials = [
    {'email': 'user1@example.com', 'password': 'password1'},
    {'email': 'user2@example.com', 'password': 'password2'},
    {'email': 'user3@example.com', 'password': 'password3'}
  ];

  bool isLoggedIn = false;

  while (!isLoggedIn) {
    String email = prompt('Enter your email:');
    String password = prompt('Enter your password:');

    for (var credential in credentials) {
      if (credential['email'] == email && credential['password'] == password) {
        isLoggedIn = true;
        print('User login successful.');
        break;
      }
    }

    if (!isLoggedIn) {
      print('Invalid credentials. Please try again.');
    }
  }
}

String prompt(String promptText) {
  print(promptText);
  return stdin.readLineSync().trim();
} 

question # 19 ;

void main() {
  List<int> numbers = [2, 7, 4, 9, 6, 1, 8];

  for (int number in numbers) {
    if (number > 5) {
      print(number);
    }
  }
} 

 question # 20 ;

void main() {
  String inputString = 'Hello, World!';
  int vowelCount = 0;
  List<String> vowels = ['a', 'e', 'i', 'o', 'u'];

  for (int i = 0; i < inputString.length; i++) {
    String char = inputString[i].toLowerCase();
    if (vowels.contains(char)) {
      vowelCount++;
    }
  }

  print('The number of vowels in the string is: $vowelCount');
}

 question # 21 ;
void main() {
  var numbers = [5, 8, 2, 10, 3];
  
  var max = numbers[0];
  var min = numbers[0];
  
  for (var i = 1; i < numbers.length; i++) {
    if (numbers[i] > max) {
      max = numbers[i];
    }
    if (numbers[i] < min) {
      min = numbers[i];
    }
  }
  
  print('Maximum element: $max');
  print('Minimum element: $min');
}
 question # 22 ;

void main() {
  var numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9];
  var sumOfSquares = 0;

  for (var num in numbers) {
    if (num % 2 != 0) {
      sumOfSquares += num * num;
    }
  }

  print('Sum of squares of odd numbers: $sumOfSquares');
}

 question # 23 ;

void main() {
  List<Map<String, dynamic>> studentDetails = [
    {'name': 'John', 'marks': [80, 75, 90], 'section': 'A', 'rollNumber': 101},
    {'name': 'Emma', 'marks': [95, 92, 88], 'section': 'B', 'rollNumber': 102},
    {'name': 'Ryan', 'marks': [70, 65, 75], 'section': 'A', 'rollNumber': 103},
  ];

  for (var student in studentDetails) {
    var name = student['name'];
    var marks = List<int>.from(student['marks']);
    var averageScore = calculateAverageScore(marks);
    var grade = determineGrade(averageScore);

    print('Name: $name | Grade: $grade');
  }
}

double calculateAverageScore(List<int> marks) {
  var totalMarks = marks.length * 100;
  var sum = marks.reduce((a, b) => a + b);
  return sum / totalMarks * 100;
}

String determineGrade(double averageScore) {
  if (averageScore >= 90) {
    return 'A';
  } else if (averageScore >= 80) {
    return 'B';
  } else if (averageScore >= 70) {
    return 'C';
  } else if (averageScore >= 60) {
    return 'D';
  } else {
    return 'F';
  }
} 


question # 24 ; 


void main() {
  var numbers = [-5, 8, -2, -10, 3];
  var sum = 0;
  var count = 0;

  for (var num in numbers) {
    if (num < 0) {
      sum += num;
      count++;
    }
  }

  if (count > 0) {
    var average = sum / count;
    print('Average of negative numbers: $average');
  } else {
    print('No negative numbers found.');
  }
}

question # 25 ;

Write a program that takes a list of integers as input and returns a new
list containing only the prime numbers from the original list. Implement
the solution using a for loop and logical operations.
Input: [4, 7, 10, 13, 16, 19, 22, 25, 28, 31]
Output: [7, 13, 19, 31] 

